---
import type { CollectionEntry } from 'astro:content';
import Chip from './Chip.astro';

interface Props {
  snippet: CollectionEntry<'snippet'>;
}

const { snippet } = Astro.props;
const { Content } = await snippet.render();

const maxHeight = Math.floor(Math.random() * (750 - 400)) + 400;
---

<div
  class="group relative overflow-clip rounded-xl bg-white p-4 ring-1 ring-zinc-200 dark:bg-zinc-900 dark:ring-zinc-800"
  style={`max-height: ${maxHeight}px`}
>
  <div
    data-click-target
    class="absolute inset-0 z-10 hidden place-content-center place-items-center gap-2 bg-gradient-to-b from-transparent via-pink-100/90 to-transparent text-sm font-bold text-pink-800 group-hover:grid dark:via-yellow-950/90 dark:text-yellow-200"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="32"
      height="32"
      viewBox="0 0 24 24"
      ><path
        fill="currentColor"
        d="m11.5 11l6.38 5.37l-.88.18l-.64.12c-.63.13-.99.83-.71 1.4l.27.58l1.36 2.94l-1.42.66l-1.36-2.93l-.26-.58a.985.985 0 0 0-1.52-.36l-.51.4l-.71.57V11m-.74-2.31a.76.76 0 0 0-.76.76V20.9c0 .42.34.76.76.76c.19 0 .35-.06.48-.16l1.91-1.55l1.66 3.62c.13.27.4.43.69.43c.11 0 .22 0 .33-.08l2.76-1.28c.38-.18.56-.64.36-1.01L17.28 18l2.41-.45a.88.88 0 0 0 .43-.26c.27-.32.23-.79-.12-1.08l-8.74-7.35l-.01.01a.756.756 0 0 0-.49-.18M15 10V8h5v2h-5m-1.17-5.24l2.83-2.83l1.41 1.41l-2.83 2.83l-1.41-1.41M10 0h2v5h-2V0M3.93 14.66l2.83-2.83l1.41 1.41l-2.83 2.83l-1.41-1.41m0-11.32l1.41-1.41l2.83 2.83l-1.41 1.41l-2.83-2.83M7 10H2V8h5v2"
      ></path></svg
    >Click to copy
  </div>
  <div
    class="absolute inset-0 grid bg-gradient-to-b from-transparent via-transparent to-white dark:to-zinc-900"
  >
    <a
      href={`/${snippet.slug}`}
      class="z-20 mt-auto hidden items-center justify-center gap-1 py-3 text-sm font-bold text-pink-800 decoration-2 underline-offset-2 hover:underline group-hover:flex dark:text-yellow-200"
      >View Snippet<svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        ><path
          fill="currentColor"
          d="M13.3 17.275q-.3-.3-.288-.725t.313-.725L16.15 13H5q-.425 0-.713-.288T4 12q0-.425.288-.713T5 11h11.15L13.3 8.15q-.3-.3-.3-.713t.3-.712q.3-.3.713-.3t.712.3L19.3 11.3q.15.15.213.325t.062.375q0 .2-.063.375t-.212.325l-4.6 4.6q-.275.275-.687.275t-.713-.3Z"
        ></path></svg
      ></a
    >
  </div>
  <div class="prose dark:prose-invert prose-pre:rounded-xl">
    <h3>{snippet.data.title}</h3>
    <div class="flex flex-wrap gap-2">
      {snippet.data.tags.map((t) => <Chip text={t} />)}
    </div>
    <Content />
  </div>
</div>

<script>
  const clickTargets = document.querySelectorAll<HTMLDivElement>(
    '[data-click-target]'
  );
  clickTargets.forEach((target) => {
    target.addEventListener('click', async () => {
      const code = target.parentElement!.querySelector('pre')?.innerText || '';
      try {
        await navigator.clipboard.writeText(code);
        const oldHtml = target.innerHTML;
        target.innerHTML =
          '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path fill="currentColor" d="M4 7v14h14v2H4c-1.1 0-2-.9-2-2V7h2m8.8 8.35l-3.3-3.3l1.4-1.4l1.9 1.9l4.3-4.3l1.4 1.4l-5.7 5.7M20 3c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H8c-1.1 0-2-.9-2-2V5c0-1.1.9-2 2-2h3.18C11.6 1.84 12.7 1 14 1c1.3 0 2.4.84 2.82 2H20m-6 0c-.55 0-1 .45-1 1s.45 1 1 1s1-.45 1-1s-.45-1-1-1m-4 4V5H8v12h12V5h-2v2h-8Z"/></svg>Copied to clipboard!';
        setTimeout(() => {
          target.innerHTML = oldHtml;
        }, 2000);
      } catch (error) {
        alert('Could not copy to your clipboard');
      }
    });
  });
</script>
