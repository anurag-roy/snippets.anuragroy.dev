---
import { type CollectionEntry, getCollection } from 'astro:content';
import '../index.css';
import Chip from '../components/Chip.astro';
import Logo from '../components/Logo.astro';
import ThemeSwitcher from '../components/ThemeSwitcher.astro';
import BaseLayout from '../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const allSnippets = await getCollection('snippet');
  return allSnippets.map((snippet) => ({
    params: { slug: snippet.slug },
    props: { entry: snippet },
  }));
}

interface Props {
  entry: CollectionEntry<'snippet'>;
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<BaseLayout title={entry.data.title}>
  <header
    class="border-b border-zinc-200 bg-white px-4 dark:border-zinc-800 dark:bg-zinc-900"
  >
    <div class="mx-auto flex max-w-[96rem] items-center justify-between py-4">
      <Logo />
      <ThemeSwitcher />
    </div>
  </header>
  <main class="w-full overflow-y-auto bg-white p-4 py-8 dark:bg-zinc-900">
    <article
      class="prose mx-auto max-w-3xl dark:prose-invert prose-pre:relative"
    >
      <h1>{entry.data.title}</h1>
      <div class="flex flex-wrap gap-2">
        {entry.data.tags.map((t) => <Chip text={t} />)}
      </div>
      <hr />
      <Content />
    </article>
  </main>
</BaseLayout>

<script>
  if (navigator.clipboard) {
    const clipBoardSvg = `Copy <svg width="12" height="16" viewBox="0 0 15 19" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M11.0475 0.905273H1.67197C0.812542 0.905273 0.109375 1.60844 0.109375 2.46787V13.406H1.67197V2.46787H11.0475V0.905273ZM13.3914 4.03046H4.79716C3.93773 4.03046 3.23456 4.73363 3.23456 5.59306V16.5312C3.23456 17.3906 3.93773 18.0938 4.79716 18.0938H13.3914C14.2509 18.0938 14.954 17.3906 14.954 16.5312V5.59306C14.954 4.73363 14.2509 4.03046 13.3914 4.03046ZM13.3914 16.5312H4.79716V5.59306H13.3914V16.5312Z" fill="currentColor"></path></svg>`;
    const clipBoardCheckedSvg = `Copied <svg width="12" height="16" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M5 3.33333H3.33333V5H5V3.33333ZM5 6.66667H3.33333V8.33333H5V6.66667ZM5 0C4.075 0 3.33333 0.75 3.33333 1.66667H5V0ZM8.33333 10H6.66667V11.6667H8.33333V10ZM13.3333 0V1.66667H15C15 0.75 14.25 0 13.3333 0ZM8.33333 0H6.66667V1.66667H8.33333V0ZM5 11.6667V10H3.33333C3.33333 10.9167 4.075 11.6667 5 11.6667ZM13.3333 8.33333H15V6.66667H13.3333V8.33333ZM13.3333 5H15V3.33333H13.3333V5ZM13.3333 11.6667C14.25 11.6667 15 10.9167 15 10H13.3333V11.6667ZM1.66667 3.33333H0V13.3333C0 14.25 0.741667 15 1.66667 15H11.6667V13.3333H1.66667V3.33333ZM10 1.66667H11.6667V0H10V1.66667ZM10 11.6667H11.6667V10H10V11.6667Z" fill="currentColor"></path></svg>`;

    let allPre = document.querySelectorAll('pre');

    allPre.forEach((pre) => {
      // Button appears on hovering inside `pre`
      pre.classList.add('group');
      let button = document.createElement('button');
      button.classList.add(
        'absolute',
        'top-2',
        'right-2',
        'items-center',
        'px-3',
        'py-2',
        'rounded-lg',
        'text-zinc-700',
        'dark:text-zinc-200',
        'text-xs',
        'cursor-pointer',
        'bg-zinc-200',
        'dark:bg-zinc-700',
        'hover:bg-zinc-300',
        'dark:hover:bg-zinc-600',
        'hidden',
        'group-hover:flex'
      );
      button.innerHTML = clipBoardSvg;
      button.addEventListener('click', async () => {
        const codeContent = pre.querySelector('code')!.innerText;
        await navigator.clipboard.writeText(codeContent);

        // Button will stay visible as long as 'Copied' is displayed,
        // regardless of hover state and then return to default state
        button.innerHTML = clipBoardCheckedSvg;
        button.classList.remove('hidden');
        button.classList.add('flex');
        setTimeout(() => {
          button.innerHTML = clipBoardSvg;
          button.classList.remove('flex');
          button.classList.add('hidden');
        }, 2000);
      });
      pre.appendChild(button);
    });
  }
</script>
